
	
		
			
				
					EMENTA
						
						APIs Data Drive com ASP.NETCore 3 e EF 3
							
							
								API voltada a orientação a dados. cobrindo toda a parte de CRUD, sendo uma api completa
								com todos os metodos necessarios para criar uma api voltada a dados.
								
									Autentificacao e autorização
									Perfis de acesso
									Boas praticas na API:
										Cache
										Performace
										Compressão
										Otimização
										Documentação
										Versionamento
										
									
									Utilizando azure para uma basica introdução a Apis escalaveis na nuvem
				
				
				
				
				
				
					FERRAMENTAS NECESSARIAS PARA DEV
							
								Sem servico rodando na maquina: sera utilizado para ter um servidor do sql server
							docker: https://www.docker.com/get-started
							
								Uma forma visual de utilizar o docker, podendo ter uma visibilidade das maquinas utilizadas 
								e tendo o total controle sem utilziar linhas de comando
							OPCIONAL kitematic: https://github.com/docker/kitematic/releases
							
							
							.NET Core 3 SDK
							
							
							Azure data studio
					
					
					
					
					
					
					CONFIGURACOES NO DOCKER
							
							Usaremos um servidor de mssql-server-linux
									
									Configuracoes necessarias para funcionamento	
										
										GENERAL
											ACCEPT_EULA : Y
										
											MSSQL_SA_PASSWORD : @$!H123Ss2
										
										Hostname / Ports
											garantir que esteja rodando na porta 1433
													DOCKER PORT : 1433
							
							
							
					
					
					
					
					
					CONFIGURACOES DO PROJETO SHOP
						
							Startup
								Na Versão 3.0, temos a nova forma de se trabalhar com APIs utilizando 
									using Microsoft.Extensions.Configuration;
									using Microsoft.Extensions.DependencyInjection;
									using Microsoft.Extensions.Hosting;
								
								ConfigureServices
									Método responsavel por endicar quais servicos do dotnet core a aplicação ira utilizar
								
								Configure 
									Realizar as configurações necessárias dos serviços endicados no método ConfigureServices
									
										IApplicationBuilder --> Tudo que quiser saber sobre sua aplicação
										
										IWebHostinEnvironment ---> Variavel responsavel por endicar se está em ambiente de desenvolvimento ou de producao
											Pode realizar o chaviamento
											
										UseDeveloperExceptionPage --> Quando nossa aplicação está em ambiente de desenvolvimento, usamos esse método para ter um descrição mais detalhada de erros 
										
										UseHtttpsRedirection --> força a aplicação responda apenas em https
											Primeiro passoa a nivel de infrestutura e boa pratica 
										
										UseRouting --> padrao de rota do asp net mvc
										
										UseAuthorization ---> autentificacao
										
										UseEndPoints ---> Mapeamento dos endPoint
											Por padrão, dando a possibilidade de configuracoes das rotas nas proprias controllers
										
							Program
								Toda Aplicação Console, se tem uma classe program.cs, também pode ser chamada de aplicações
								self-Hosting, ou seja, são aplicações auto hospedadas.
										Podendo se auto geranciar
										Conseguindo receber e manipular requisições sem a intevensão do IIS
							
							
							appsettings.Development.json
								Arquivo responsavel pelas configurações quando o ambiente estiver em desenvolvimento
								
							appsettings.json
								Responsavel quando a aplicação estiver em ambiente de produção
								
					
					
					Data Drive - APIs orientadas a dados 
						Em muitos cenarios quando voce começa a criar a sua API, pode identificar que não tem
						regras de negocios em certas partes do seu dominio, ou seja, quando voce comeceu a criar seu produto
						onde voce quer ter uma API para esse produto, para suportar frontEnds novos. Tendo a situação de apenas o cadastro, como de pessoas,produtos,categorias,não é necessario
						uma regra de negocio ou aplicar arquitetura limpa, DDD,csqrs. E a grande ideia de ter dominios ricos, e a execução de testes de unidades.Então por isso o padrao Data Drive, quando
						e aplicações que são apenas espelho do banco de dados(CRUD) essa formato de API e perfeito.
						
				
				
				System.ComponentModel.DataAnnotations
						Utilizando o dataAnnotations, facilita e ameniza os erros na hora da criação do banco de dados atraves do EF utilizando suas tags.
				
				
				
				
				Quando queremos realizar um referencia de um entidade dentro de uma class e não queremos so o Id, mas outros atributos, é necessario instanciar a class:
							
								Ex.:
									public class Product
										
											public int CategoryId { get; set; } ---> Caso eu queira salvar só o Id da category, dessa forma e mais do que o suficiente.

											public Category Category { get; set; } ---> 
												Mas se caso eu queira ter as informaçoes alem do Id, tenho que criar uma propriedade da Category. Chamada tambem de Propriedade de referencia 
												Na situação de querer toda a informacao da class Category, pode remover a propridade CategoryId, pois essa propridade já e o bastante para o EF entender
												se caso queria realizar um Include.
				
				
				
				
				app.UseEndpoints(endpoints =>{ endpoints.MapControllers(); });
					
						Essa configuração dentro do Startup.Configure, basicamente informa que as configurações das rotas/endpoint do seu projeto, quem terá a responsabilidade e as 
						proprias controllers, utilizando e herdando do ControllerBase
						
							Ex.:
									No projeto e definido como default: https://localhost:5001
									
									[Route("Categories")] --> Para chegar nessa Controller a rota vai ser :  https://localhost:5001/Categories
									public class CategoryController : ControllerBase {
									
										[Route("Metodo")] ---> para chegar nesse metodo da controller a url: https://localhost:5001/Categories/Metodo
																Caso não tenha nenhuma rota( [Route("")] ) definida a rota vai ser :https://localhost:5001/Categories
										public string MeuMetodo(){
											return "Ola mundo";
										}
									
									}
				
				[Route("{id}")]
					
						Estou sinalizando que essa rota vai receber um parametro na sua url
							Utilizando para pegar informacoes como Id de alguma entidade no banco
							
							E de boa pratica realizar a tipagem do tipo de parametro, para evitar eventuais erros
										  ---------------------
										  |   				   | --> caseSensetive
								[Route("{id:int}")]            |  
								public int Get(int id){return id;}
					
				
				[FromBody]
					Fica responsavel por sinalizar quem deve receber as informacoes do corpo da requisicao(body)
					
					
				A utilização de Task juntamente com o ActionResult
					
					Ao utilizar o Task, iremos trabalhar de uma forma asincrona, ou seja, nao iremos paralizar o thread 
					principal do projeto, tornando assim a aplicação mais rapida e paralela, pois iremos realizara criacao
					de thread.
					
						A utilização do ActionResult, fornece respostas muito mais adequadas quando iremos realizar um 
						response.
								NotFound();
								
				
				
				
				
				Microsoft.EntityFrameworkCore.InMemory
						
						Trabalhar para entender os conceitos primordias antes do EF, antes de trabalhar com o sqlServer
						
						
						Context
							
							E uma representacao do nosso banco de dados em memoria, ou seja,
							nosso banco de dados pode ter 200 ou 500 tabelas, mas o context e o que vamos 
							realmente trabalhar nesse banco de dados 
									
									Ele que permite que possamos realizar o mapeamento/orientacao da nossoa aplicacao em relacao ao nosso banco de dados
									
									
							DbSet<>
								
								A representacao das classes em tabelas 
								
				
				
				Injeção de dependencia | Geralmente resolvemos no startup
					
						Em alguma parte do nosso codigo/aplicacao, vai necessitar de recursos para poder funcionar,
						e o papel da injecao de dependencia e fornecer esses recursos, pois quem necessita não tem obrigacao
						de procurar esse recurso para comeca a trabalhar, ou seja,a aplicacao e responsavel de fornecer.
						
							
							Dependencia nas controller
								
									Toda controller necessita realizar uma comunicacao com o banco, para realizar o que for
									necessario para aplicacao, ou seja, a aplicacao deve resolver essa dependencia
									
									Tirando como exemplo o sqlServer, para trablhar com ele deve ser atentar a alguns requisitos
											
											Deve ser atentar ao numero de conexao criadas/abertas, pois tem limite
													
													Para Resolver:
														
														service.AddScoped< DataContext, DataContext>
																
																O AddScoped, vai garantir que so terá uma conexao aberta pela requisicao, 
																ou seja, durante as requisicao vai ser criada uma conexao com banco de dados, em caso de uma outra requisicao, será passado a mesma conexa, sem ter que abrir uma outra novamente
																e será fechada/destruida quando terminar.
																		
																		Existem outras injecao de dependencias:
																				AddAddTransient<> : Ira realizar a criacao de uma nova conexao no banco em todas as vezes que for solicitado
																				
																				AddSingleton<> : Ira realizar a criacao de apenas uma conexao no banco durante a execucao da aplicacao